/*
   This is a simplified version of the 395-0121-000 program. This version
   does not record calibration date and time. It simply records the data
   recorded during calibration and uses those values as reference points
   during testing.

   The values acquired during calibration are stored in eeprom.

   Keep in mind you can only mess with EEPROM less than 10^5 times.
*/

#include <EEPROM.h>

// global variables

///////// EEPROM address(es)
int calibaddr = 0;  // calibration value will be stored at address 0

//////// GPIO pin designation

int SensorRead = A0;        // analog 0 for reading pressure sensor

// LEDs
int PassLED = 30;
int FailLED = 31;
int PressureLED = 32;
int ReadyLED = 34;

// relays
int Valve1 = 2;         // Inlet Valve
int Valve2 = 3;         // Exhaust valve

// buttons
int StartCalibration = 5;   // all buttons pulled DOWN
int StartTest = 6;
int Restart = 7;

// time constants
int Exhausttime = 5000;     // keep exhaust valve open for this long to exhaust unit
int Pressuretime = 5000;    // keep inlet valve open for this long for pressurizing unit
int Droptime = 3000;        // interval between calibration initial and final readings

// EEPROM Addresses

int Dropaddr = 0;           // address for storing the calibration drop
int Initialaddr = 1;        // address for initial pressure
int Finaladdr = 2;          // address for final pressure

// Other variables
int Result;


void setup() {

  // LEDs
  pinMode(PassLED, OUTPUT);
  pinMode(FailLED, OUTPUT);
  pinMode(PressureLED, OUTPUT);
  pinMode(ReadyLED, OUTPUT);

  // Relays
  pinMode(Valve1, OUTPUT);
  pinMode(Valve2, OUTPUT);

  // Buttons
  pinMode(StartCalibration, INPUT);
  pinMode(StartTest, INPUT);
  pinMode(Restart, INPUT);

  // Sensor read
  pinMode(SensorRead, INPUT);

  Serial.begin(9600);

}

/////////////////////////////////////// Main Function

void loop() {

  Serial.println("Ready");
  Serial.print("Calibration pressure drop is:");
  Serial.println(EEPROM.read(Dropaddr));

  int Start = 0;                        // This will be renewed by the 'buttoninput' function
  while (Start == 0) {
    Start = buttoninput();
  }

  // Once sequnce is started, either perform test or calibration

  if (Start == 1) {                     // Perform test
    test();

    // Once the operation is complete, output a verdict

    int Result = verdict();
  }
  else if (Start == 2) {                // Perform calibration
    calibration();
  }


  if (Start == 1) {                        // This loop only applicable if 'test' is run. For calibration, the loop ends before here.
    if (Result == 1) {                     // If unit PASSED the test...
      digitalWrite(PassLED, HIGH);         // Light up the Pass LED
    }
    else if (Result == 0) {               // If unit FAILED the test...
      waitreset();                        // Blind the FailLED and wait for operator to reset the jig
    }
  }
}

/////////////////////////////////////////   Misc Functions   //////////////////////////////////////////

/////// 1. Function for releaseing air
void exhaust() {
  // To release air through exhaust, close valve one and open valve two;
  // Allow for 5 seconds for complete exhaustion
  Serial.println("Exhausting Sequence Initiated");
  delay(100);
  digitalWrite(Valve1, HIGH);      // 1. Close valve 1
  Serial.println("Valve 1 Closed");

  delay(500);                      // 2. Allow valve 1 to close completely
  digitalWrite(Valve2, LOW);       // 3. Open valve 2
  Serial.println("Valve 2 Open");

  delay(Exhausttime);              // 4. Wait specified time interval

  digitalWrite(Valve2, HIGH);      // 5. Close valve 2
  Serial.println("Valve 2 Closed");
  delay(100);
}

/////// 2. Function for calibration
void calibration() {
  // Calibration sequence:

  pressurize();                        // 1. Pressurize unit. (use the 'pressurize' function)

  int Initial = analogRead(0);         // 2. Once unit is pressurized, take initial reading (make sure valve 1 is closed)
  Serial.print("Initial reading: ");
  Serial.println(Initial);
  delay(Droptime);                     // 3. Wait specified time period

  int Final = analogRead(0);           // 4. Take secondary reading
  Serial.print("Final reading: ");
  Serial.println(Final);

  int Maxdrop = Initial - Final;       // 5. Calculate pressure drop

  EEPROM.write(Dropaddr, Maxdrop / 4);     // 6. Write to EEPROM address 0 (reserved for calibration value (pressure drop of the 'golden sample')

  delay(1000);

  exhaust();                           // 7. release pressure
}

/////// 3. Function for pressurizing unit
void pressurize() {
  // pressurizing sequence
  digitalWrite(PressureLED, HIGH);
  Serial.println("Pressurizing Sequence Initiated");

  digitalWrite(Valve2, HIGH);       // 1. Close valve 2
  Serial.println("Valve 2 Closed");
  delay(500);                       // 2. Wait for valve 2 to close completely

  digitalWrite(Valve1, LOW);        // 3. Open valve 1
  Serial.println("Valve 1 Open");

  delay(Pressuretime);              // 4. Wait specified time interval

  digitalWrite(Valve1, HIGH);       // 5. Close valve 1
  Serial.println("Valve 1 Closed");
  
  digitalWrite(PressureLED, LOW);
}


///////// 4. Function for outputting a verdict

int verdict() {
  int Verdict;
  int Maxdrop = EEPROM.read(Dropaddr);
  int Lastinitial = EEPROM.read(Initialaddr);
  int Lastfinal = EEPROM.read(Finaladdr);
  int Lastdrop = Lastinitial * 4 - Lastfinal * 4;     // remember, EEPROM only gets to 255 so every analog read is reduced to 0.25 * original

  Serial.print("Last measured pressure drop is: ");
  Serial.println(Lastdrop);

  // now compare the test drop with calibration drop
  if (Lastdrop > (Maxdrop * 4)) {
    Verdict = 0;                // faileed test: Verdict = 0
    Serial.println("Unit FAILED");
  }
  else {
    Verdict = 1;                // passed test: Verdict = 1
    Serial.println("Unit PASSED");
  }
  return Verdict;
}

////////// 7. Function for waiting for reset

int waitreset() {

  // This function will blink the fail LED at 1Hz until the reset button is pushed.
  // Returns Step, which will be 1.

  // As of Mar 01 2019, the Fail LED is malfunctioning. Using the pass LED instead. When someone gets a chance,
  // change my pos LED mounting method and replace that LED.

  int counter = 0;
  int Exit = 0;
  int Brightness = 1;
  int onoff = 1;

  while (Exit == 0) {
    if (digitalRead(Restart) == HIGH) {
      delay(25);
      if (digitalRead(Restart) == HIGH) {
        Exit = 1;
        digitalWrite(PassLED, LOW);
      }
    }
    else {
      if (Brightness == 1) {
        digitalWrite(PassLED, HIGH);
        delay(100);
        ++ counter;
        if (counter == 5) {
          Brightness = 0;
          counter = 0;
        }
      }

      else if (Brightness == 0) {
        digitalWrite(PassLED, LOW);
        delay(100);
        ++ counter;
        if (counter == 5) {
          Brightness = 1;
          counter = 0;
        }
      }
    }
  }

  return Exit;

}

///////// 8. Function for regular test
void test() {
  Serial.println("Test Sequence Initiated");

  pressurize();                               // 1. Pressurize unit

  int Initial = analogRead(0);                // 2. Read initial pressure
  EEPROM.write(Initialaddr, Initial / 4);     // 3. Write initial to EEPROM
  Serial.print("Initial reading: ");
  Serial.println(Initial / 4);

  delay(Droptime);                            // 4. Wait this long before taking the final reading

  int Final = analogRead(0);                  // 5. Read the final value
  EEPROM.write(Finaladdr, Final / 4);         // 6. Write final to EEPROM
  Serial.print("Final reading: ");
  Serial.println(Final / 4);

  delay(1000);

  exhaust();                                  // 7. Release pressure
}


///////// 9. Start button detect
int buttoninput() {
  int Start = 0;

  if ((digitalRead(StartTest) == HIGH)) {                       //  Test Start
    delay(25);
    if ((digitalRead(StartTest) == HIGH)) {
      Start = 1;                                                  // Start = 1 for regular testing
      Serial.println("Test Selected");
      digitalWrite(ReadyLED, LOW);
      delay(100);
    }
  }
  // Calibration Button
  else if ((digitalRead(StartCalibration) == HIGH)) {             // Calibration Start
    delay(25);
    if ((digitalRead(StartCalibration) == HIGH)) {
      Start = 2;                                                  // Start = 2 for calibration
      Serial.println("Calibration Selected");
      digitalWrite(ReadyLED, LOW);
      delay(100);

    }
  }
  // Cricket Button
  else {
    digitalWrite (ReadyLED, HIGH);
    Start = 0;
    delay(100);

  }
  return Start;
}
